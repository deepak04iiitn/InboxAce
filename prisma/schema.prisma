generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String            @id @default(uuid())
  email                        String            @unique
  name                         String
  password                     String?           @default("")
  role                         UserRole          @default(NORMAL)
  pricingTier                  PricingTier       @default(FREE)
  trialStartDate               DateTime?
  trialEndDate                 DateTime?
  isTrialActive                Boolean           @default(false)
  hasUsedTrial                 Boolean           @default(false)
  subscriptionId               String?
  subscriptionStartDate        DateTime?
  subscriptionEndDate          DateTime?
  isSubscriptionActive         Boolean           @default(false)
  location                     String?
  profileImage                 String?
  createdAt                    DateTime          @default(now())
  updatedAt                    DateTime          @updatedAt
  lastLoginAt                  DateTime?
  portfolioLinks               String[]          @default([])
  emailVerified                DateTime?
  defaultTemplateId            String?
  customDefaultBody            String?
  customDefaultSubject         String?
  customDefaultFollowUpBody    String?
  customDefaultFollowUpSubject String?
  defaultFollowUpTemplateId    String?
  accounts                     Account[]
  activities                   Activity[]
  analytics                    Analytics[]
  campaigns                    Campaign[]
  emailAccounts                EmailAccount[]
  templates                    EmailTemplate[]   @relation("UserCreatedTemplates")
  jobs                         Job[]
  jobBatches                   JobBatch[]
  defaultFollowUpTemplate      EmailTemplate?    @relation("UserDefaultFollowUpTemplate", fields: [defaultFollowUpTemplateId], references: [id])
  defaultTemplate              EmailTemplate?    @relation("UserDefaultTemplate", fields: [defaultTemplateId], references: [id])
  badges                       UserBadge[]
  ownedWorkspaces              Workspace[]       @relation("WorkspaceOwner")
  workspaceMemberships         WorkspaceMember[]
  blockedFromWorkspaces        WorkspaceBlockedUser[]
  blockedUsers                 WorkspaceBlockedUser[] @relation("BlockedByUser")

  @@index([email])
  @@index([pricingTier])
  @@index([defaultTemplateId])
}

model EmailAccount {
  id            String    @id @default(uuid())
  userId        String
  email         String
  provider      String
  accessToken   String?
  refreshToken  String?
  tokenExpiry   DateTime?
  appPassword   String?
  isPrimary     Boolean   @default(false)
  isActive      Boolean   @default(true)
  dailyLimit    Int       @default(50)
  sentToday     Int       @default(0)
  lastResetDate DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sentEmails    Email[]
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, email])
  @@index([userId])
}

model JobBatch {
  id                   String         @id @default(uuid())
  userId               String
  name                 String
  description          String?
  templateId           String?
  batchSubject         String?
  batchBody            String?
  batchLinks           String[]       @default([])
  sendNow              Boolean        @default(true)
  scheduledFor         DateTime?
  maxFollowUps         Int            @default(0)
  daysBetweenFollowUps Int            @default(3)
  totalJobs            Int            @default(0)
  sentCount            Int            @default(0)
  repliedCount         Int            @default(0)
  followUpsSentCount   Int            @default(0)
  isActive             Boolean        @default(true)
  allSent              Boolean        @default(false)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  jobs                 Job[]
  selectedTemplate     EmailTemplate? @relation(fields: [templateId], references: [id])
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([templateId])
}

model Job {
  id                     String         @id @default(uuid())
  userId                 String
  workspaceId            String?
  batchId                String?
  recipientName          String
  recipientGender        Gender
  position               String
  company                String
  recipientEmail         String
  emailType              EmailType
  customSubject          String?
  customBody             String?
  customLinks            String[]       @default([])
  hasCustomSchedule      Boolean        @default(false)
  customSendNow          Boolean?
  customScheduledFor     DateTime?
  hasCustomFollowUp      Boolean        @default(false)
  customMaxFollowUps     Int?
  followUpsSent          Int            @default(0)
  status                 JobStatus      @default(NOT_SENT)
  sentAt                 DateTime?
  gotReply               Boolean        @default(false)
  repliedAt              DateTime?
  notes                  String?
  tags                   String[]       @default([])
  lastFollowUpAt         DateTime?
  nextFollowUpAt         DateTime?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  templateId             String?
  autoSendAt             DateTime?
  customFollowUpInterval Int?
  isDirty                Boolean        @default(false)
  lastSavedAt            DateTime?
  emails                 Email[]
  batch                  JobBatch?      @relation(fields: [batchId], references: [id])
  template               EmailTemplate? @relation(fields: [templateId], references: [id])
  user                   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace              Workspace?     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  comments               JobComment[]

  @@index([userId])
  @@index([workspaceId])
  @@index([batchId])
  @@index([status])
  @@index([customScheduledFor])
  @@index([autoSendAt])
  @@index([emailType])
  @@index([templateId])
}

model JobComment {
  id        String   @id @default(uuid())
  jobId     String
  userId    String
  userName  String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
}

model Email {
  id               String       @id @default(uuid())
  jobId            String
  emailAccountId   String
  subject          String
  body             String
  htmlBody         String?
  status           EmailStatus  @default(PENDING)
  isFollowUp       Boolean      @default(false)
  followUpSequence Int          @default(1)
  sentAt           DateTime?
  openedAt         DateTime?
  repliedAt        DateTime?
  openCount        Int          @default(0)
  errorMessage     String?
  retryCount       Int          @default(0)
  threadId         String?
  messageId        String?
  inReplyTo        String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  emailAccount     EmailAccount @relation(fields: [emailAccountId], references: [id], onDelete: Cascade)
  job              Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([emailAccountId])
  @@index([status])
  @@index([sentAt])
}

model EmailTemplate {
  id                       String           @id @default(uuid())
  userId                   String?
  name                     String
  subject                  String
  body                     String
  category                 TemplateCategory @default(GENERAL)
  tags                     String[]         @default([])
  isSystemTemplate         Boolean          @default(false)
  isPublic                 Boolean          @default(false)
  isShared                 Boolean          @default(false)
  usageCount               Int              @default(0)
  rating                   Float            @default(0.0)
  ratingCount              Int              @default(0)
  variables                String[]         @default([])
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  createdByName            String?
  downloads                Int              @default(0)
  isCommunity              Boolean          @default(false)
  likes                    Int              @default(0)
  description              String?
  difficultyLevel          String?
  estimatedLength          Int?
  targetAudience           String?
  templateType             TemplateType     @default(APPLICATION)
  campaigns                Campaign[]
  user                     User?            @relation("UserCreatedTemplates", fields: [userId], references: [id], onDelete: Cascade)
  jobs                     Job[]
  jobBatches               JobBatch[]
  templateLikes            TemplateLike[]
  ratings                  TemplateRating[]
  usersWithDefaultFollowUp User[]           @relation("UserDefaultFollowUpTemplate")
  usersWithDefault         User[]           @relation("UserDefaultTemplate")

  @@index([userId])
  @@index([category])
  @@index([templateType])
  @@index([isPublic])
  @@index([isCommunity])
}

model TemplateRating {
  id         String        @id @default(uuid())
  templateId String
  userId     String
  rating     Int
  comment    String?
  createdAt  DateTime      @default(now())
  template   EmailTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, userId])
  @@index([templateId])
}

model TemplateLike {
  id         String        @id @default(uuid())
  templateId String
  userId     String
  createdAt  DateTime      @default(now())
  template   EmailTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, userId])
  @@index([templateId])
  @@index([userId])
}

model Campaign {
  id                 String         @id @default(uuid())
  userId             String
  templateId         String?
  name               String
  description        String?
  isActive           Boolean        @default(true)
  enableFollowUp     Boolean        @default(false)
  followUpDelay      Int            @default(3)
  maxFollowUps       Int            @default(2)
  followUpTemplates  String[]       @default([])
  scheduledStartDate DateTime?
  scheduledEndDate   DateTime?
  totalSent          Int            @default(0)
  totalOpened        Int            @default(0)
  totalReplies       Int            @default(0)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  template           EmailTemplate? @relation(fields: [templateId], references: [id])
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
}

model Analytics {
  id                    String   @id @default(uuid())
  userId                String
  date                  DateTime @default(now()) @db.Date
  emailsSent            Int      @default(0)
  emailsOpened          Int      @default(0)
  emailsReplied         Int      @default(0)
  emailsFailed          Int      @default(0)
  applicationsSubmitted Int      @default(0)
  interviewsScheduled   Int      @default(0)
  followUpsSent         Int      @default(0)
  openRate              Float    @default(0.0)
  replyRate             Float    @default(0.0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

model Workspace {
  id                     String            @id @default(uuid())
  name                   String
  password               String
  ownerId                String
  description            String?
  defaultFollowUpInterval Int?              @default(3)
  totalEmailsSent        Int               @default(0)
  totalReplies           Int               @default(0)
  totalOpportunities     Int               @default(0)
  isActive               Boolean           @default(true)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  inviteCode             String            @unique @default("WS-TEMP")
  jobs                   Job[]
  owner                  User              @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members                WorkspaceMember[]
  blockedUsers           WorkspaceBlockedUser[]

  @@index([ownerId])
  @@index([inviteCode])
}

model WorkspaceMember {
  id              String        @id @default(uuid())
  workspaceId     String
  userId          String
  role            WorkspaceRole @default(CONTRIBUTOR)
  leadsAdded      Int           @default(0)
  emailsSent      Int           @default(0)
  joinedAt        DateTime      @default(now())
  repliesReceived Int           @default(0)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace       Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
}

model WorkspaceBlockedUser {
  id          String    @id @default(uuid())
  workspaceId String
  userId      String
  blockedBy   String
  reason      String?
  blockedAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  blockedByUser User    @relation("BlockedByUser", fields: [blockedBy], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
  @@index([blockedBy])
}

model Badge {
  id          String      @id @default(uuid())
  name        String      @unique
  description String
  icon        String
  requirement Int
  createdAt   DateTime    @default(now())
  userBadges  UserBadge[]
}

model UserBadge {
  id       String   @id @default(uuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
}

model Activity {
  id          String   @id @default(uuid())
  userId      String
  action      String
  description String
  metadata    Json?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum UserRole {
  NORMAL
  PREMIUM
  ADMIN
}

enum PricingTier {
  FREE
  PLUS
  PRO
}

enum JobStatus {
  NOT_SENT
  SCHEDULED
  SENT
  REPLIED
  FOLLOW_UP_SENT
  DRAFT
}

enum EmailStatus {
  PENDING
  SCHEDULED
  SENT
  FAILED
  OPENED
  REPLIED
}

enum Gender {
  MALE
  FEMALE
  NOT_SPECIFIED
}

enum EmailType {
  APPLICATION
  REFERRAL_REQUEST
  FOLLOW_UP_INTERVIEW
}

enum WorkspaceRole {
  ADMIN
  CONTRIBUTOR
}

enum TemplateCategory {
  GENERAL
  TECH
  FINANCE
  MARKETING
  SALES
  DESIGN
  CONSULTING
  OTHER
  HEALTHCARE
  EDUCATION
  LEGAL
  REAL_ESTATE
  NON_PROFIT
  ENTERTAINMENT
  RETAIL
  MANUFACTURING
  AGRICULTURE
  TRANSPORTATION
  ENERGY
  TELECOMMUNICATIONS
  GOVERNMENT
}

enum TemplateType {
  APPLICATION
  REFERRAL_REQUEST
  FOLLOW_UP
  THANK_YOU
  REJECTION_FOLLOW_UP
  INTERVIEW_FOLLOW_UP
  NETWORKING
  COLD_OUTREACH
  PARTNERSHIP
  COLLABORATION
  CUSTOM
}
